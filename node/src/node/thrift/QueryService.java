/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package node.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-4-7")
public class QueryService {

  public interface Iface {

    public void regOKSuccess1(String ip, int port) throws org.apache.thrift.TException;

    public void regOKSuccess2(String ip1, int port1, String ip2, int port2) throws org.apache.thrift.TException;

    public String join(String ip, int port) throws org.apache.thrift.TException;

    public String leave(String ip, int port) throws org.apache.thrift.TException;

    public void fileSearch(String fileName, String ip, int port, int id, int hops) throws org.apache.thrift.TException;

    public void fileFound(List<String> fileList, String searchIp, int searchPort, String foundIp, int foundPort, int id, int hops) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void regOKSuccess1(String ip, int port, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void regOKSuccess2(String ip1, int port1, String ip2, int port2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void join(String ip, int port, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void leave(String ip, int port, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void fileSearch(String fileName, String ip, int port, int id, int hops, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void fileFound(List<String> fileList, String searchIp, int searchPort, String foundIp, int foundPort, int id, int hops, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void regOKSuccess1(String ip, int port) throws org.apache.thrift.TException
    {
      send_regOKSuccess1(ip, port);
      recv_regOKSuccess1();
    }

    public void send_regOKSuccess1(String ip, int port) throws org.apache.thrift.TException
    {
      regOKSuccess1_args args = new regOKSuccess1_args();
      args.setIp(ip);
      args.setPort(port);
      sendBase("regOKSuccess1", args);
    }

    public void recv_regOKSuccess1() throws org.apache.thrift.TException
    {
      regOKSuccess1_result result = new regOKSuccess1_result();
      receiveBase(result, "regOKSuccess1");
      return;
    }

    public void regOKSuccess2(String ip1, int port1, String ip2, int port2) throws org.apache.thrift.TException
    {
      send_regOKSuccess2(ip1, port1, ip2, port2);
      recv_regOKSuccess2();
    }

    public void send_regOKSuccess2(String ip1, int port1, String ip2, int port2) throws org.apache.thrift.TException
    {
      regOKSuccess2_args args = new regOKSuccess2_args();
      args.setIp1(ip1);
      args.setPort1(port1);
      args.setIp2(ip2);
      args.setPort2(port2);
      sendBase("regOKSuccess2", args);
    }

    public void recv_regOKSuccess2() throws org.apache.thrift.TException
    {
      regOKSuccess2_result result = new regOKSuccess2_result();
      receiveBase(result, "regOKSuccess2");
      return;
    }

    public String join(String ip, int port) throws org.apache.thrift.TException
    {
      send_join(ip, port);
      return recv_join();
    }

    public void send_join(String ip, int port) throws org.apache.thrift.TException
    {
      join_args args = new join_args();
      args.setIp(ip);
      args.setPort(port);
      sendBase("join", args);
    }

    public String recv_join() throws org.apache.thrift.TException
    {
      join_result result = new join_result();
      receiveBase(result, "join");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "join failed: unknown result");
    }

    public String leave(String ip, int port) throws org.apache.thrift.TException
    {
      send_leave(ip, port);
      return recv_leave();
    }

    public void send_leave(String ip, int port) throws org.apache.thrift.TException
    {
      leave_args args = new leave_args();
      args.setIp(ip);
      args.setPort(port);
      sendBase("leave", args);
    }

    public String recv_leave() throws org.apache.thrift.TException
    {
      leave_result result = new leave_result();
      receiveBase(result, "leave");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "leave failed: unknown result");
    }

    public void fileSearch(String fileName, String ip, int port, int id, int hops) throws org.apache.thrift.TException
    {
      send_fileSearch(fileName, ip, port, id, hops);
    }

    public void send_fileSearch(String fileName, String ip, int port, int id, int hops) throws org.apache.thrift.TException
    {
      fileSearch_args args = new fileSearch_args();
      args.setFileName(fileName);
      args.setIp(ip);
      args.setPort(port);
      args.setId(id);
      args.setHops(hops);
      sendBase("fileSearch", args);
    }

    public void fileFound(List<String> fileList, String searchIp, int searchPort, String foundIp, int foundPort, int id, int hops) throws org.apache.thrift.TException
    {
      send_fileFound(fileList, searchIp, searchPort, foundIp, foundPort, id, hops);
    }

    public void send_fileFound(List<String> fileList, String searchIp, int searchPort, String foundIp, int foundPort, int id, int hops) throws org.apache.thrift.TException
    {
      fileFound_args args = new fileFound_args();
      args.setFileList(fileList);
      args.setSearchIp(searchIp);
      args.setSearchPort(searchPort);
      args.setFoundIp(foundIp);
      args.setFoundPort(foundPort);
      args.setId(id);
      args.setHops(hops);
      sendBase("fileFound", args);
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void regOKSuccess1(String ip, int port, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      regOKSuccess1_call method_call = new regOKSuccess1_call(ip, port, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class regOKSuccess1_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String ip;
      private int port;
      public regOKSuccess1_call(String ip, int port, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ip = ip;
        this.port = port;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("regOKSuccess1", org.apache.thrift.protocol.TMessageType.CALL, 0));
        regOKSuccess1_args args = new regOKSuccess1_args();
        args.setIp(ip);
        args.setPort(port);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_regOKSuccess1();
      }
    }

    public void regOKSuccess2(String ip1, int port1, String ip2, int port2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      regOKSuccess2_call method_call = new regOKSuccess2_call(ip1, port1, ip2, port2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class regOKSuccess2_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String ip1;
      private int port1;
      private String ip2;
      private int port2;
      public regOKSuccess2_call(String ip1, int port1, String ip2, int port2, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ip1 = ip1;
        this.port1 = port1;
        this.ip2 = ip2;
        this.port2 = port2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("regOKSuccess2", org.apache.thrift.protocol.TMessageType.CALL, 0));
        regOKSuccess2_args args = new regOKSuccess2_args();
        args.setIp1(ip1);
        args.setPort1(port1);
        args.setIp2(ip2);
        args.setPort2(port2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_regOKSuccess2();
      }
    }

    public void join(String ip, int port, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      join_call method_call = new join_call(ip, port, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class join_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String ip;
      private int port;
      public join_call(String ip, int port, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ip = ip;
        this.port = port;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("join", org.apache.thrift.protocol.TMessageType.CALL, 0));
        join_args args = new join_args();
        args.setIp(ip);
        args.setPort(port);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_join();
      }
    }

    public void leave(String ip, int port, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      leave_call method_call = new leave_call(ip, port, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class leave_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String ip;
      private int port;
      public leave_call(String ip, int port, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ip = ip;
        this.port = port;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("leave", org.apache.thrift.protocol.TMessageType.CALL, 0));
        leave_args args = new leave_args();
        args.setIp(ip);
        args.setPort(port);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_leave();
      }
    }

    public void fileSearch(String fileName, String ip, int port, int id, int hops, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      fileSearch_call method_call = new fileSearch_call(fileName, ip, port, id, hops, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class fileSearch_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String fileName;
      private String ip;
      private int port;
      private int id;
      private int hops;
      public fileSearch_call(String fileName, String ip, int port, int id, int hops, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.fileName = fileName;
        this.ip = ip;
        this.port = port;
        this.id = id;
        this.hops = hops;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("fileSearch", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        fileSearch_args args = new fileSearch_args();
        args.setFileName(fileName);
        args.setIp(ip);
        args.setPort(port);
        args.setId(id);
        args.setHops(hops);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void fileFound(List<String> fileList, String searchIp, int searchPort, String foundIp, int foundPort, int id, int hops, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      fileFound_call method_call = new fileFound_call(fileList, searchIp, searchPort, foundIp, foundPort, id, hops, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class fileFound_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> fileList;
      private String searchIp;
      private int searchPort;
      private String foundIp;
      private int foundPort;
      private int id;
      private int hops;
      public fileFound_call(List<String> fileList, String searchIp, int searchPort, String foundIp, int foundPort, int id, int hops, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.fileList = fileList;
        this.searchIp = searchIp;
        this.searchPort = searchPort;
        this.foundIp = foundIp;
        this.foundPort = foundPort;
        this.id = id;
        this.hops = hops;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("fileFound", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        fileFound_args args = new fileFound_args();
        args.setFileList(fileList);
        args.setSearchIp(searchIp);
        args.setSearchPort(searchPort);
        args.setFoundIp(foundIp);
        args.setFoundPort(foundPort);
        args.setId(id);
        args.setHops(hops);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("regOKSuccess1", new regOKSuccess1());
      processMap.put("regOKSuccess2", new regOKSuccess2());
      processMap.put("join", new join());
      processMap.put("leave", new leave());
      processMap.put("fileSearch", new fileSearch());
      processMap.put("fileFound", new fileFound());
      return processMap;
    }

    public static class regOKSuccess1<I extends Iface> extends org.apache.thrift.ProcessFunction<I, regOKSuccess1_args> {
      public regOKSuccess1() {
        super("regOKSuccess1");
      }

      public regOKSuccess1_args getEmptyArgsInstance() {
        return new regOKSuccess1_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public regOKSuccess1_result getResult(I iface, regOKSuccess1_args args) throws org.apache.thrift.TException {
        regOKSuccess1_result result = new regOKSuccess1_result();
        iface.regOKSuccess1(args.ip, args.port);
        return result;
      }
    }

    public static class regOKSuccess2<I extends Iface> extends org.apache.thrift.ProcessFunction<I, regOKSuccess2_args> {
      public regOKSuccess2() {
        super("regOKSuccess2");
      }

      public regOKSuccess2_args getEmptyArgsInstance() {
        return new regOKSuccess2_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public regOKSuccess2_result getResult(I iface, regOKSuccess2_args args) throws org.apache.thrift.TException {
        regOKSuccess2_result result = new regOKSuccess2_result();
        iface.regOKSuccess2(args.ip1, args.port1, args.ip2, args.port2);
        return result;
      }
    }

    public static class join<I extends Iface> extends org.apache.thrift.ProcessFunction<I, join_args> {
      public join() {
        super("join");
      }

      public join_args getEmptyArgsInstance() {
        return new join_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public join_result getResult(I iface, join_args args) throws org.apache.thrift.TException {
        join_result result = new join_result();
        result.success = iface.join(args.ip, args.port);
        return result;
      }
    }

    public static class leave<I extends Iface> extends org.apache.thrift.ProcessFunction<I, leave_args> {
      public leave() {
        super("leave");
      }

      public leave_args getEmptyArgsInstance() {
        return new leave_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public leave_result getResult(I iface, leave_args args) throws org.apache.thrift.TException {
        leave_result result = new leave_result();
        result.success = iface.leave(args.ip, args.port);
        return result;
      }
    }

    public static class fileSearch<I extends Iface> extends org.apache.thrift.ProcessFunction<I, fileSearch_args> {
      public fileSearch() {
        super("fileSearch");
      }

      public fileSearch_args getEmptyArgsInstance() {
        return new fileSearch_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, fileSearch_args args) throws org.apache.thrift.TException {
        iface.fileSearch(args.fileName, args.ip, args.port, args.id, args.hops);
        return null;
      }
    }

    public static class fileFound<I extends Iface> extends org.apache.thrift.ProcessFunction<I, fileFound_args> {
      public fileFound() {
        super("fileFound");
      }

      public fileFound_args getEmptyArgsInstance() {
        return new fileFound_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, fileFound_args args) throws org.apache.thrift.TException {
        iface.fileFound(args.fileList, args.searchIp, args.searchPort, args.foundIp, args.foundPort, args.id, args.hops);
        return null;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("regOKSuccess1", new regOKSuccess1());
      processMap.put("regOKSuccess2", new regOKSuccess2());
      processMap.put("join", new join());
      processMap.put("leave", new leave());
      processMap.put("fileSearch", new fileSearch());
      processMap.put("fileFound", new fileFound());
      return processMap;
    }

    public static class regOKSuccess1<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, regOKSuccess1_args, Void> {
      public regOKSuccess1() {
        super("regOKSuccess1");
      }

      public regOKSuccess1_args getEmptyArgsInstance() {
        return new regOKSuccess1_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            regOKSuccess1_result result = new regOKSuccess1_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            regOKSuccess1_result result = new regOKSuccess1_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, regOKSuccess1_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.regOKSuccess1(args.ip, args.port,resultHandler);
      }
    }

    public static class regOKSuccess2<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, regOKSuccess2_args, Void> {
      public regOKSuccess2() {
        super("regOKSuccess2");
      }

      public regOKSuccess2_args getEmptyArgsInstance() {
        return new regOKSuccess2_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            regOKSuccess2_result result = new regOKSuccess2_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            regOKSuccess2_result result = new regOKSuccess2_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, regOKSuccess2_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.regOKSuccess2(args.ip1, args.port1, args.ip2, args.port2,resultHandler);
      }
    }

    public static class join<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, join_args, String> {
      public join() {
        super("join");
      }

      public join_args getEmptyArgsInstance() {
        return new join_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            join_result result = new join_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            join_result result = new join_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, join_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.join(args.ip, args.port,resultHandler);
      }
    }

    public static class leave<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, leave_args, String> {
      public leave() {
        super("leave");
      }

      public leave_args getEmptyArgsInstance() {
        return new leave_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            leave_result result = new leave_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            leave_result result = new leave_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, leave_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.leave(args.ip, args.port,resultHandler);
      }
    }

    public static class fileSearch<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, fileSearch_args, Void> {
      public fileSearch() {
        super("fileSearch");
      }

      public fileSearch_args getEmptyArgsInstance() {
        return new fileSearch_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, fileSearch_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.fileSearch(args.fileName, args.ip, args.port, args.id, args.hops,resultHandler);
      }
    }

    public static class fileFound<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, fileFound_args, Void> {
      public fileFound() {
        super("fileFound");
      }

      public fileFound_args getEmptyArgsInstance() {
        return new fileFound_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, fileFound_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.fileFound(args.fileList, args.searchIp, args.searchPort, args.foundIp, args.foundPort, args.id, args.hops,resultHandler);
      }
    }

  }

  public static class regOKSuccess1_args implements org.apache.thrift.TBase<regOKSuccess1_args, regOKSuccess1_args._Fields>, java.io.Serializable, Cloneable, Comparable<regOKSuccess1_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("regOKSuccess1_args");

    private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new regOKSuccess1_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new regOKSuccess1_argsTupleSchemeFactory());
    }

    public String ip; // required
    public int port; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IP((short)1, "ip"),
      PORT((short)2, "port");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IP
            return IP;
          case 2: // PORT
            return PORT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PORT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IP, new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(regOKSuccess1_args.class, metaDataMap);
    }

    public regOKSuccess1_args() {
    }

    public regOKSuccess1_args(
      String ip,
      int port)
    {
      this();
      this.ip = ip;
      this.port = port;
      setPortIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public regOKSuccess1_args(regOKSuccess1_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetIp()) {
        this.ip = other.ip;
      }
      this.port = other.port;
    }

    public regOKSuccess1_args deepCopy() {
      return new regOKSuccess1_args(this);
    }

    @Override
    public void clear() {
      this.ip = null;
      setPortIsSet(false);
      this.port = 0;
    }

    public String getIp() {
      return this.ip;
    }

    public regOKSuccess1_args setIp(String ip) {
      this.ip = ip;
      return this;
    }

    public void unsetIp() {
      this.ip = null;
    }

    /** Returns true if field ip is set (has been assigned a value) and false otherwise */
    public boolean isSetIp() {
      return this.ip != null;
    }

    public void setIpIsSet(boolean value) {
      if (!value) {
        this.ip = null;
      }
    }

    public int getPort() {
      return this.port;
    }

    public regOKSuccess1_args setPort(int port) {
      this.port = port;
      setPortIsSet(true);
      return this;
    }

    public void unsetPort() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    /** Returns true if field port is set (has been assigned a value) and false otherwise */
    public boolean isSetPort() {
      return EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    public void setPortIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IP:
        if (value == null) {
          unsetIp();
        } else {
          setIp((String)value);
        }
        break;

      case PORT:
        if (value == null) {
          unsetPort();
        } else {
          setPort((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IP:
        return getIp();

      case PORT:
        return Integer.valueOf(getPort());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IP:
        return isSetIp();
      case PORT:
        return isSetPort();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof regOKSuccess1_args)
        return this.equals((regOKSuccess1_args)that);
      return false;
    }

    public boolean equals(regOKSuccess1_args that) {
      if (that == null)
        return false;

      boolean this_present_ip = true && this.isSetIp();
      boolean that_present_ip = true && that.isSetIp();
      if (this_present_ip || that_present_ip) {
        if (!(this_present_ip && that_present_ip))
          return false;
        if (!this.ip.equals(that.ip))
          return false;
      }

      boolean this_present_port = true;
      boolean that_present_port = true;
      if (this_present_port || that_present_port) {
        if (!(this_present_port && that_present_port))
          return false;
        if (this.port != that.port)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ip = true && (isSetIp());
      list.add(present_ip);
      if (present_ip)
        list.add(ip);

      boolean present_port = true;
      list.add(present_port);
      if (present_port)
        list.add(port);

      return list.hashCode();
    }

    @Override
    public int compareTo(regOKSuccess1_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIp()).compareTo(other.isSetIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, other.ip);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("regOKSuccess1_args(");
      boolean first = true;

      sb.append("ip:");
      if (this.ip == null) {
        sb.append("null");
      } else {
        sb.append(this.ip);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("port:");
      sb.append(this.port);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class regOKSuccess1_argsStandardSchemeFactory implements SchemeFactory {
      public regOKSuccess1_argsStandardScheme getScheme() {
        return new regOKSuccess1_argsStandardScheme();
      }
    }

    private static class regOKSuccess1_argsStandardScheme extends StandardScheme<regOKSuccess1_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, regOKSuccess1_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ip = iprot.readString();
                struct.setIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.port = iprot.readI32();
                struct.setPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, regOKSuccess1_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ip != null) {
          oprot.writeFieldBegin(IP_FIELD_DESC);
          oprot.writeString(struct.ip);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PORT_FIELD_DESC);
        oprot.writeI32(struct.port);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class regOKSuccess1_argsTupleSchemeFactory implements SchemeFactory {
      public regOKSuccess1_argsTupleScheme getScheme() {
        return new regOKSuccess1_argsTupleScheme();
      }
    }

    private static class regOKSuccess1_argsTupleScheme extends TupleScheme<regOKSuccess1_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, regOKSuccess1_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIp()) {
          optionals.set(0);
        }
        if (struct.isSetPort()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetIp()) {
          oprot.writeString(struct.ip);
        }
        if (struct.isSetPort()) {
          oprot.writeI32(struct.port);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, regOKSuccess1_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.ip = iprot.readString();
          struct.setIpIsSet(true);
        }
        if (incoming.get(1)) {
          struct.port = iprot.readI32();
          struct.setPortIsSet(true);
        }
      }
    }

  }

  public static class regOKSuccess1_result implements org.apache.thrift.TBase<regOKSuccess1_result, regOKSuccess1_result._Fields>, java.io.Serializable, Cloneable, Comparable<regOKSuccess1_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("regOKSuccess1_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new regOKSuccess1_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new regOKSuccess1_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(regOKSuccess1_result.class, metaDataMap);
    }

    public regOKSuccess1_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public regOKSuccess1_result(regOKSuccess1_result other) {
    }

    public regOKSuccess1_result deepCopy() {
      return new regOKSuccess1_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof regOKSuccess1_result)
        return this.equals((regOKSuccess1_result)that);
      return false;
    }

    public boolean equals(regOKSuccess1_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(regOKSuccess1_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("regOKSuccess1_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class regOKSuccess1_resultStandardSchemeFactory implements SchemeFactory {
      public regOKSuccess1_resultStandardScheme getScheme() {
        return new regOKSuccess1_resultStandardScheme();
      }
    }

    private static class regOKSuccess1_resultStandardScheme extends StandardScheme<regOKSuccess1_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, regOKSuccess1_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, regOKSuccess1_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class regOKSuccess1_resultTupleSchemeFactory implements SchemeFactory {
      public regOKSuccess1_resultTupleScheme getScheme() {
        return new regOKSuccess1_resultTupleScheme();
      }
    }

    private static class regOKSuccess1_resultTupleScheme extends TupleScheme<regOKSuccess1_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, regOKSuccess1_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, regOKSuccess1_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class regOKSuccess2_args implements org.apache.thrift.TBase<regOKSuccess2_args, regOKSuccess2_args._Fields>, java.io.Serializable, Cloneable, Comparable<regOKSuccess2_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("regOKSuccess2_args");

    private static final org.apache.thrift.protocol.TField IP1_FIELD_DESC = new org.apache.thrift.protocol.TField("ip1", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PORT1_FIELD_DESC = new org.apache.thrift.protocol.TField("port1", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField IP2_FIELD_DESC = new org.apache.thrift.protocol.TField("ip2", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField PORT2_FIELD_DESC = new org.apache.thrift.protocol.TField("port2", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new regOKSuccess2_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new regOKSuccess2_argsTupleSchemeFactory());
    }

    public String ip1; // required
    public int port1; // required
    public String ip2; // required
    public int port2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IP1((short)1, "ip1"),
      PORT1((short)2, "port1"),
      IP2((short)3, "ip2"),
      PORT2((short)4, "port2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IP1
            return IP1;
          case 2: // PORT1
            return PORT1;
          case 3: // IP2
            return IP2;
          case 4: // PORT2
            return PORT2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PORT1_ISSET_ID = 0;
    private static final int __PORT2_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IP1, new org.apache.thrift.meta_data.FieldMetaData("ip1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PORT1, new org.apache.thrift.meta_data.FieldMetaData("port1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.IP2, new org.apache.thrift.meta_data.FieldMetaData("ip2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PORT2, new org.apache.thrift.meta_data.FieldMetaData("port2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(regOKSuccess2_args.class, metaDataMap);
    }

    public regOKSuccess2_args() {
    }

    public regOKSuccess2_args(
      String ip1,
      int port1,
      String ip2,
      int port2)
    {
      this();
      this.ip1 = ip1;
      this.port1 = port1;
      setPort1IsSet(true);
      this.ip2 = ip2;
      this.port2 = port2;
      setPort2IsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public regOKSuccess2_args(regOKSuccess2_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetIp1()) {
        this.ip1 = other.ip1;
      }
      this.port1 = other.port1;
      if (other.isSetIp2()) {
        this.ip2 = other.ip2;
      }
      this.port2 = other.port2;
    }

    public regOKSuccess2_args deepCopy() {
      return new regOKSuccess2_args(this);
    }

    @Override
    public void clear() {
      this.ip1 = null;
      setPort1IsSet(false);
      this.port1 = 0;
      this.ip2 = null;
      setPort2IsSet(false);
      this.port2 = 0;
    }

    public String getIp1() {
      return this.ip1;
    }

    public regOKSuccess2_args setIp1(String ip1) {
      this.ip1 = ip1;
      return this;
    }

    public void unsetIp1() {
      this.ip1 = null;
    }

    /** Returns true if field ip1 is set (has been assigned a value) and false otherwise */
    public boolean isSetIp1() {
      return this.ip1 != null;
    }

    public void setIp1IsSet(boolean value) {
      if (!value) {
        this.ip1 = null;
      }
    }

    public int getPort1() {
      return this.port1;
    }

    public regOKSuccess2_args setPort1(int port1) {
      this.port1 = port1;
      setPort1IsSet(true);
      return this;
    }

    public void unsetPort1() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PORT1_ISSET_ID);
    }

    /** Returns true if field port1 is set (has been assigned a value) and false otherwise */
    public boolean isSetPort1() {
      return EncodingUtils.testBit(__isset_bitfield, __PORT1_ISSET_ID);
    }

    public void setPort1IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PORT1_ISSET_ID, value);
    }

    public String getIp2() {
      return this.ip2;
    }

    public regOKSuccess2_args setIp2(String ip2) {
      this.ip2 = ip2;
      return this;
    }

    public void unsetIp2() {
      this.ip2 = null;
    }

    /** Returns true if field ip2 is set (has been assigned a value) and false otherwise */
    public boolean isSetIp2() {
      return this.ip2 != null;
    }

    public void setIp2IsSet(boolean value) {
      if (!value) {
        this.ip2 = null;
      }
    }

    public int getPort2() {
      return this.port2;
    }

    public regOKSuccess2_args setPort2(int port2) {
      this.port2 = port2;
      setPort2IsSet(true);
      return this;
    }

    public void unsetPort2() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PORT2_ISSET_ID);
    }

    /** Returns true if field port2 is set (has been assigned a value) and false otherwise */
    public boolean isSetPort2() {
      return EncodingUtils.testBit(__isset_bitfield, __PORT2_ISSET_ID);
    }

    public void setPort2IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PORT2_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IP1:
        if (value == null) {
          unsetIp1();
        } else {
          setIp1((String)value);
        }
        break;

      case PORT1:
        if (value == null) {
          unsetPort1();
        } else {
          setPort1((Integer)value);
        }
        break;

      case IP2:
        if (value == null) {
          unsetIp2();
        } else {
          setIp2((String)value);
        }
        break;

      case PORT2:
        if (value == null) {
          unsetPort2();
        } else {
          setPort2((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IP1:
        return getIp1();

      case PORT1:
        return Integer.valueOf(getPort1());

      case IP2:
        return getIp2();

      case PORT2:
        return Integer.valueOf(getPort2());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IP1:
        return isSetIp1();
      case PORT1:
        return isSetPort1();
      case IP2:
        return isSetIp2();
      case PORT2:
        return isSetPort2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof regOKSuccess2_args)
        return this.equals((regOKSuccess2_args)that);
      return false;
    }

    public boolean equals(regOKSuccess2_args that) {
      if (that == null)
        return false;

      boolean this_present_ip1 = true && this.isSetIp1();
      boolean that_present_ip1 = true && that.isSetIp1();
      if (this_present_ip1 || that_present_ip1) {
        if (!(this_present_ip1 && that_present_ip1))
          return false;
        if (!this.ip1.equals(that.ip1))
          return false;
      }

      boolean this_present_port1 = true;
      boolean that_present_port1 = true;
      if (this_present_port1 || that_present_port1) {
        if (!(this_present_port1 && that_present_port1))
          return false;
        if (this.port1 != that.port1)
          return false;
      }

      boolean this_present_ip2 = true && this.isSetIp2();
      boolean that_present_ip2 = true && that.isSetIp2();
      if (this_present_ip2 || that_present_ip2) {
        if (!(this_present_ip2 && that_present_ip2))
          return false;
        if (!this.ip2.equals(that.ip2))
          return false;
      }

      boolean this_present_port2 = true;
      boolean that_present_port2 = true;
      if (this_present_port2 || that_present_port2) {
        if (!(this_present_port2 && that_present_port2))
          return false;
        if (this.port2 != that.port2)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ip1 = true && (isSetIp1());
      list.add(present_ip1);
      if (present_ip1)
        list.add(ip1);

      boolean present_port1 = true;
      list.add(present_port1);
      if (present_port1)
        list.add(port1);

      boolean present_ip2 = true && (isSetIp2());
      list.add(present_ip2);
      if (present_ip2)
        list.add(ip2);

      boolean present_port2 = true;
      list.add(present_port2);
      if (present_port2)
        list.add(port2);

      return list.hashCode();
    }

    @Override
    public int compareTo(regOKSuccess2_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIp1()).compareTo(other.isSetIp1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIp1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip1, other.ip1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPort1()).compareTo(other.isSetPort1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPort1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port1, other.port1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIp2()).compareTo(other.isSetIp2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIp2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip2, other.ip2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPort2()).compareTo(other.isSetPort2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPort2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port2, other.port2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("regOKSuccess2_args(");
      boolean first = true;

      sb.append("ip1:");
      if (this.ip1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ip1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("port1:");
      sb.append(this.port1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ip2:");
      if (this.ip2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ip2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("port2:");
      sb.append(this.port2);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class regOKSuccess2_argsStandardSchemeFactory implements SchemeFactory {
      public regOKSuccess2_argsStandardScheme getScheme() {
        return new regOKSuccess2_argsStandardScheme();
      }
    }

    private static class regOKSuccess2_argsStandardScheme extends StandardScheme<regOKSuccess2_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, regOKSuccess2_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IP1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ip1 = iprot.readString();
                struct.setIp1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PORT1
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.port1 = iprot.readI32();
                struct.setPort1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // IP2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ip2 = iprot.readString();
                struct.setIp2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PORT2
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.port2 = iprot.readI32();
                struct.setPort2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, regOKSuccess2_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ip1 != null) {
          oprot.writeFieldBegin(IP1_FIELD_DESC);
          oprot.writeString(struct.ip1);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PORT1_FIELD_DESC);
        oprot.writeI32(struct.port1);
        oprot.writeFieldEnd();
        if (struct.ip2 != null) {
          oprot.writeFieldBegin(IP2_FIELD_DESC);
          oprot.writeString(struct.ip2);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PORT2_FIELD_DESC);
        oprot.writeI32(struct.port2);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class regOKSuccess2_argsTupleSchemeFactory implements SchemeFactory {
      public regOKSuccess2_argsTupleScheme getScheme() {
        return new regOKSuccess2_argsTupleScheme();
      }
    }

    private static class regOKSuccess2_argsTupleScheme extends TupleScheme<regOKSuccess2_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, regOKSuccess2_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIp1()) {
          optionals.set(0);
        }
        if (struct.isSetPort1()) {
          optionals.set(1);
        }
        if (struct.isSetIp2()) {
          optionals.set(2);
        }
        if (struct.isSetPort2()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetIp1()) {
          oprot.writeString(struct.ip1);
        }
        if (struct.isSetPort1()) {
          oprot.writeI32(struct.port1);
        }
        if (struct.isSetIp2()) {
          oprot.writeString(struct.ip2);
        }
        if (struct.isSetPort2()) {
          oprot.writeI32(struct.port2);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, regOKSuccess2_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.ip1 = iprot.readString();
          struct.setIp1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.port1 = iprot.readI32();
          struct.setPort1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.ip2 = iprot.readString();
          struct.setIp2IsSet(true);
        }
        if (incoming.get(3)) {
          struct.port2 = iprot.readI32();
          struct.setPort2IsSet(true);
        }
      }
    }

  }

  public static class regOKSuccess2_result implements org.apache.thrift.TBase<regOKSuccess2_result, regOKSuccess2_result._Fields>, java.io.Serializable, Cloneable, Comparable<regOKSuccess2_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("regOKSuccess2_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new regOKSuccess2_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new regOKSuccess2_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(regOKSuccess2_result.class, metaDataMap);
    }

    public regOKSuccess2_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public regOKSuccess2_result(regOKSuccess2_result other) {
    }

    public regOKSuccess2_result deepCopy() {
      return new regOKSuccess2_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof regOKSuccess2_result)
        return this.equals((regOKSuccess2_result)that);
      return false;
    }

    public boolean equals(regOKSuccess2_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(regOKSuccess2_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("regOKSuccess2_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class regOKSuccess2_resultStandardSchemeFactory implements SchemeFactory {
      public regOKSuccess2_resultStandardScheme getScheme() {
        return new regOKSuccess2_resultStandardScheme();
      }
    }

    private static class regOKSuccess2_resultStandardScheme extends StandardScheme<regOKSuccess2_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, regOKSuccess2_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, regOKSuccess2_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class regOKSuccess2_resultTupleSchemeFactory implements SchemeFactory {
      public regOKSuccess2_resultTupleScheme getScheme() {
        return new regOKSuccess2_resultTupleScheme();
      }
    }

    private static class regOKSuccess2_resultTupleScheme extends TupleScheme<regOKSuccess2_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, regOKSuccess2_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, regOKSuccess2_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class join_args implements org.apache.thrift.TBase<join_args, join_args._Fields>, java.io.Serializable, Cloneable, Comparable<join_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("join_args");

    private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new join_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new join_argsTupleSchemeFactory());
    }

    public String ip; // required
    public int port; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IP((short)1, "ip"),
      PORT((short)2, "port");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IP
            return IP;
          case 2: // PORT
            return PORT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PORT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IP, new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(join_args.class, metaDataMap);
    }

    public join_args() {
    }

    public join_args(
      String ip,
      int port)
    {
      this();
      this.ip = ip;
      this.port = port;
      setPortIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public join_args(join_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetIp()) {
        this.ip = other.ip;
      }
      this.port = other.port;
    }

    public join_args deepCopy() {
      return new join_args(this);
    }

    @Override
    public void clear() {
      this.ip = null;
      setPortIsSet(false);
      this.port = 0;
    }

    public String getIp() {
      return this.ip;
    }

    public join_args setIp(String ip) {
      this.ip = ip;
      return this;
    }

    public void unsetIp() {
      this.ip = null;
    }

    /** Returns true if field ip is set (has been assigned a value) and false otherwise */
    public boolean isSetIp() {
      return this.ip != null;
    }

    public void setIpIsSet(boolean value) {
      if (!value) {
        this.ip = null;
      }
    }

    public int getPort() {
      return this.port;
    }

    public join_args setPort(int port) {
      this.port = port;
      setPortIsSet(true);
      return this;
    }

    public void unsetPort() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    /** Returns true if field port is set (has been assigned a value) and false otherwise */
    public boolean isSetPort() {
      return EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    public void setPortIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IP:
        if (value == null) {
          unsetIp();
        } else {
          setIp((String)value);
        }
        break;

      case PORT:
        if (value == null) {
          unsetPort();
        } else {
          setPort((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IP:
        return getIp();

      case PORT:
        return Integer.valueOf(getPort());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IP:
        return isSetIp();
      case PORT:
        return isSetPort();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof join_args)
        return this.equals((join_args)that);
      return false;
    }

    public boolean equals(join_args that) {
      if (that == null)
        return false;

      boolean this_present_ip = true && this.isSetIp();
      boolean that_present_ip = true && that.isSetIp();
      if (this_present_ip || that_present_ip) {
        if (!(this_present_ip && that_present_ip))
          return false;
        if (!this.ip.equals(that.ip))
          return false;
      }

      boolean this_present_port = true;
      boolean that_present_port = true;
      if (this_present_port || that_present_port) {
        if (!(this_present_port && that_present_port))
          return false;
        if (this.port != that.port)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ip = true && (isSetIp());
      list.add(present_ip);
      if (present_ip)
        list.add(ip);

      boolean present_port = true;
      list.add(present_port);
      if (present_port)
        list.add(port);

      return list.hashCode();
    }

    @Override
    public int compareTo(join_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIp()).compareTo(other.isSetIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, other.ip);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("join_args(");
      boolean first = true;

      sb.append("ip:");
      if (this.ip == null) {
        sb.append("null");
      } else {
        sb.append(this.ip);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("port:");
      sb.append(this.port);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class join_argsStandardSchemeFactory implements SchemeFactory {
      public join_argsStandardScheme getScheme() {
        return new join_argsStandardScheme();
      }
    }

    private static class join_argsStandardScheme extends StandardScheme<join_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, join_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ip = iprot.readString();
                struct.setIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.port = iprot.readI32();
                struct.setPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, join_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ip != null) {
          oprot.writeFieldBegin(IP_FIELD_DESC);
          oprot.writeString(struct.ip);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PORT_FIELD_DESC);
        oprot.writeI32(struct.port);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class join_argsTupleSchemeFactory implements SchemeFactory {
      public join_argsTupleScheme getScheme() {
        return new join_argsTupleScheme();
      }
    }

    private static class join_argsTupleScheme extends TupleScheme<join_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, join_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIp()) {
          optionals.set(0);
        }
        if (struct.isSetPort()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetIp()) {
          oprot.writeString(struct.ip);
        }
        if (struct.isSetPort()) {
          oprot.writeI32(struct.port);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, join_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.ip = iprot.readString();
          struct.setIpIsSet(true);
        }
        if (incoming.get(1)) {
          struct.port = iprot.readI32();
          struct.setPortIsSet(true);
        }
      }
    }

  }

  public static class join_result implements org.apache.thrift.TBase<join_result, join_result._Fields>, java.io.Serializable, Cloneable, Comparable<join_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("join_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new join_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new join_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(join_result.class, metaDataMap);
    }

    public join_result() {
    }

    public join_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public join_result(join_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public join_result deepCopy() {
      return new join_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public join_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof join_result)
        return this.equals((join_result)that);
      return false;
    }

    public boolean equals(join_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(join_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("join_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class join_resultStandardSchemeFactory implements SchemeFactory {
      public join_resultStandardScheme getScheme() {
        return new join_resultStandardScheme();
      }
    }

    private static class join_resultStandardScheme extends StandardScheme<join_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, join_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, join_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class join_resultTupleSchemeFactory implements SchemeFactory {
      public join_resultTupleScheme getScheme() {
        return new join_resultTupleScheme();
      }
    }

    private static class join_resultTupleScheme extends TupleScheme<join_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, join_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, join_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class leave_args implements org.apache.thrift.TBase<leave_args, leave_args._Fields>, java.io.Serializable, Cloneable, Comparable<leave_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("leave_args");

    private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new leave_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new leave_argsTupleSchemeFactory());
    }

    public String ip; // required
    public int port; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IP((short)1, "ip"),
      PORT((short)2, "port");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IP
            return IP;
          case 2: // PORT
            return PORT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PORT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IP, new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(leave_args.class, metaDataMap);
    }

    public leave_args() {
    }

    public leave_args(
      String ip,
      int port)
    {
      this();
      this.ip = ip;
      this.port = port;
      setPortIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public leave_args(leave_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetIp()) {
        this.ip = other.ip;
      }
      this.port = other.port;
    }

    public leave_args deepCopy() {
      return new leave_args(this);
    }

    @Override
    public void clear() {
      this.ip = null;
      setPortIsSet(false);
      this.port = 0;
    }

    public String getIp() {
      return this.ip;
    }

    public leave_args setIp(String ip) {
      this.ip = ip;
      return this;
    }

    public void unsetIp() {
      this.ip = null;
    }

    /** Returns true if field ip is set (has been assigned a value) and false otherwise */
    public boolean isSetIp() {
      return this.ip != null;
    }

    public void setIpIsSet(boolean value) {
      if (!value) {
        this.ip = null;
      }
    }

    public int getPort() {
      return this.port;
    }

    public leave_args setPort(int port) {
      this.port = port;
      setPortIsSet(true);
      return this;
    }

    public void unsetPort() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    /** Returns true if field port is set (has been assigned a value) and false otherwise */
    public boolean isSetPort() {
      return EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    public void setPortIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IP:
        if (value == null) {
          unsetIp();
        } else {
          setIp((String)value);
        }
        break;

      case PORT:
        if (value == null) {
          unsetPort();
        } else {
          setPort((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IP:
        return getIp();

      case PORT:
        return Integer.valueOf(getPort());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IP:
        return isSetIp();
      case PORT:
        return isSetPort();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof leave_args)
        return this.equals((leave_args)that);
      return false;
    }

    public boolean equals(leave_args that) {
      if (that == null)
        return false;

      boolean this_present_ip = true && this.isSetIp();
      boolean that_present_ip = true && that.isSetIp();
      if (this_present_ip || that_present_ip) {
        if (!(this_present_ip && that_present_ip))
          return false;
        if (!this.ip.equals(that.ip))
          return false;
      }

      boolean this_present_port = true;
      boolean that_present_port = true;
      if (this_present_port || that_present_port) {
        if (!(this_present_port && that_present_port))
          return false;
        if (this.port != that.port)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ip = true && (isSetIp());
      list.add(present_ip);
      if (present_ip)
        list.add(ip);

      boolean present_port = true;
      list.add(present_port);
      if (present_port)
        list.add(port);

      return list.hashCode();
    }

    @Override
    public int compareTo(leave_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIp()).compareTo(other.isSetIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, other.ip);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("leave_args(");
      boolean first = true;

      sb.append("ip:");
      if (this.ip == null) {
        sb.append("null");
      } else {
        sb.append(this.ip);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("port:");
      sb.append(this.port);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class leave_argsStandardSchemeFactory implements SchemeFactory {
      public leave_argsStandardScheme getScheme() {
        return new leave_argsStandardScheme();
      }
    }

    private static class leave_argsStandardScheme extends StandardScheme<leave_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, leave_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ip = iprot.readString();
                struct.setIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.port = iprot.readI32();
                struct.setPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, leave_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ip != null) {
          oprot.writeFieldBegin(IP_FIELD_DESC);
          oprot.writeString(struct.ip);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PORT_FIELD_DESC);
        oprot.writeI32(struct.port);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class leave_argsTupleSchemeFactory implements SchemeFactory {
      public leave_argsTupleScheme getScheme() {
        return new leave_argsTupleScheme();
      }
    }

    private static class leave_argsTupleScheme extends TupleScheme<leave_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, leave_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIp()) {
          optionals.set(0);
        }
        if (struct.isSetPort()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetIp()) {
          oprot.writeString(struct.ip);
        }
        if (struct.isSetPort()) {
          oprot.writeI32(struct.port);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, leave_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.ip = iprot.readString();
          struct.setIpIsSet(true);
        }
        if (incoming.get(1)) {
          struct.port = iprot.readI32();
          struct.setPortIsSet(true);
        }
      }
    }

  }

  public static class leave_result implements org.apache.thrift.TBase<leave_result, leave_result._Fields>, java.io.Serializable, Cloneable, Comparable<leave_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("leave_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new leave_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new leave_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(leave_result.class, metaDataMap);
    }

    public leave_result() {
    }

    public leave_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public leave_result(leave_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public leave_result deepCopy() {
      return new leave_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public leave_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof leave_result)
        return this.equals((leave_result)that);
      return false;
    }

    public boolean equals(leave_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(leave_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("leave_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class leave_resultStandardSchemeFactory implements SchemeFactory {
      public leave_resultStandardScheme getScheme() {
        return new leave_resultStandardScheme();
      }
    }

    private static class leave_resultStandardScheme extends StandardScheme<leave_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, leave_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, leave_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class leave_resultTupleSchemeFactory implements SchemeFactory {
      public leave_resultTupleScheme getScheme() {
        return new leave_resultTupleScheme();
      }
    }

    private static class leave_resultTupleScheme extends TupleScheme<leave_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, leave_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, leave_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class fileSearch_args implements org.apache.thrift.TBase<fileSearch_args, fileSearch_args._Fields>, java.io.Serializable, Cloneable, Comparable<fileSearch_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fileSearch_args");

    private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField HOPS_FIELD_DESC = new org.apache.thrift.protocol.TField("hops", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fileSearch_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new fileSearch_argsTupleSchemeFactory());
    }

    public String fileName; // required
    public String ip; // required
    public int port; // required
    public int id; // required
    public int hops; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILE_NAME((short)1, "fileName"),
      IP((short)2, "ip"),
      PORT((short)3, "port"),
      ID((short)4, "id"),
      HOPS((short)5, "hops");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILE_NAME
            return FILE_NAME;
          case 2: // IP
            return IP;
          case 3: // PORT
            return PORT;
          case 4: // ID
            return ID;
          case 5: // HOPS
            return HOPS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PORT_ISSET_ID = 0;
    private static final int __ID_ISSET_ID = 1;
    private static final int __HOPS_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("fileName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IP, new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.HOPS, new org.apache.thrift.meta_data.FieldMetaData("hops", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fileSearch_args.class, metaDataMap);
    }

    public fileSearch_args() {
    }

    public fileSearch_args(
      String fileName,
      String ip,
      int port,
      int id,
      int hops)
    {
      this();
      this.fileName = fileName;
      this.ip = ip;
      this.port = port;
      setPortIsSet(true);
      this.id = id;
      setIdIsSet(true);
      this.hops = hops;
      setHopsIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fileSearch_args(fileSearch_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetFileName()) {
        this.fileName = other.fileName;
      }
      if (other.isSetIp()) {
        this.ip = other.ip;
      }
      this.port = other.port;
      this.id = other.id;
      this.hops = other.hops;
    }

    public fileSearch_args deepCopy() {
      return new fileSearch_args(this);
    }

    @Override
    public void clear() {
      this.fileName = null;
      this.ip = null;
      setPortIsSet(false);
      this.port = 0;
      setIdIsSet(false);
      this.id = 0;
      setHopsIsSet(false);
      this.hops = 0;
    }

    public String getFileName() {
      return this.fileName;
    }

    public fileSearch_args setFileName(String fileName) {
      this.fileName = fileName;
      return this;
    }

    public void unsetFileName() {
      this.fileName = null;
    }

    /** Returns true if field fileName is set (has been assigned a value) and false otherwise */
    public boolean isSetFileName() {
      return this.fileName != null;
    }

    public void setFileNameIsSet(boolean value) {
      if (!value) {
        this.fileName = null;
      }
    }

    public String getIp() {
      return this.ip;
    }

    public fileSearch_args setIp(String ip) {
      this.ip = ip;
      return this;
    }

    public void unsetIp() {
      this.ip = null;
    }

    /** Returns true if field ip is set (has been assigned a value) and false otherwise */
    public boolean isSetIp() {
      return this.ip != null;
    }

    public void setIpIsSet(boolean value) {
      if (!value) {
        this.ip = null;
      }
    }

    public int getPort() {
      return this.port;
    }

    public fileSearch_args setPort(int port) {
      this.port = port;
      setPortIsSet(true);
      return this;
    }

    public void unsetPort() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    /** Returns true if field port is set (has been assigned a value) and false otherwise */
    public boolean isSetPort() {
      return EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    public void setPortIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
    }

    public int getId() {
      return this.id;
    }

    public fileSearch_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public int getHops() {
      return this.hops;
    }

    public fileSearch_args setHops(int hops) {
      this.hops = hops;
      setHopsIsSet(true);
      return this;
    }

    public void unsetHops() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HOPS_ISSET_ID);
    }

    /** Returns true if field hops is set (has been assigned a value) and false otherwise */
    public boolean isSetHops() {
      return EncodingUtils.testBit(__isset_bitfield, __HOPS_ISSET_ID);
    }

    public void setHopsIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HOPS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FILE_NAME:
        if (value == null) {
          unsetFileName();
        } else {
          setFileName((String)value);
        }
        break;

      case IP:
        if (value == null) {
          unsetIp();
        } else {
          setIp((String)value);
        }
        break;

      case PORT:
        if (value == null) {
          unsetPort();
        } else {
          setPort((Integer)value);
        }
        break;

      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Integer)value);
        }
        break;

      case HOPS:
        if (value == null) {
          unsetHops();
        } else {
          setHops((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FILE_NAME:
        return getFileName();

      case IP:
        return getIp();

      case PORT:
        return Integer.valueOf(getPort());

      case ID:
        return Integer.valueOf(getId());

      case HOPS:
        return Integer.valueOf(getHops());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FILE_NAME:
        return isSetFileName();
      case IP:
        return isSetIp();
      case PORT:
        return isSetPort();
      case ID:
        return isSetId();
      case HOPS:
        return isSetHops();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fileSearch_args)
        return this.equals((fileSearch_args)that);
      return false;
    }

    public boolean equals(fileSearch_args that) {
      if (that == null)
        return false;

      boolean this_present_fileName = true && this.isSetFileName();
      boolean that_present_fileName = true && that.isSetFileName();
      if (this_present_fileName || that_present_fileName) {
        if (!(this_present_fileName && that_present_fileName))
          return false;
        if (!this.fileName.equals(that.fileName))
          return false;
      }

      boolean this_present_ip = true && this.isSetIp();
      boolean that_present_ip = true && that.isSetIp();
      if (this_present_ip || that_present_ip) {
        if (!(this_present_ip && that_present_ip))
          return false;
        if (!this.ip.equals(that.ip))
          return false;
      }

      boolean this_present_port = true;
      boolean that_present_port = true;
      if (this_present_port || that_present_port) {
        if (!(this_present_port && that_present_port))
          return false;
        if (this.port != that.port)
          return false;
      }

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_hops = true;
      boolean that_present_hops = true;
      if (this_present_hops || that_present_hops) {
        if (!(this_present_hops && that_present_hops))
          return false;
        if (this.hops != that.hops)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_fileName = true && (isSetFileName());
      list.add(present_fileName);
      if (present_fileName)
        list.add(fileName);

      boolean present_ip = true && (isSetIp());
      list.add(present_ip);
      if (present_ip)
        list.add(ip);

      boolean present_port = true;
      list.add(present_port);
      if (present_port)
        list.add(port);

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      boolean present_hops = true;
      list.add(present_hops);
      if (present_hops)
        list.add(hops);

      return list.hashCode();
    }

    @Override
    public int compareTo(fileSearch_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFileName()).compareTo(other.isSetFileName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileName, other.fileName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIp()).compareTo(other.isSetIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, other.ip);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHops()).compareTo(other.isSetHops());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHops()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hops, other.hops);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fileSearch_args(");
      boolean first = true;

      sb.append("fileName:");
      if (this.fileName == null) {
        sb.append("null");
      } else {
        sb.append(this.fileName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ip:");
      if (this.ip == null) {
        sb.append("null");
      } else {
        sb.append(this.ip);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("port:");
      sb.append(this.port);
      first = false;
      if (!first) sb.append(", ");
      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("hops:");
      sb.append(this.hops);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fileSearch_argsStandardSchemeFactory implements SchemeFactory {
      public fileSearch_argsStandardScheme getScheme() {
        return new fileSearch_argsStandardScheme();
      }
    }

    private static class fileSearch_argsStandardScheme extends StandardScheme<fileSearch_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fileSearch_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fileName = iprot.readString();
                struct.setFileNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ip = iprot.readString();
                struct.setIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.port = iprot.readI32();
                struct.setPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // HOPS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.hops = iprot.readI32();
                struct.setHopsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fileSearch_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fileName != null) {
          oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
          oprot.writeString(struct.fileName);
          oprot.writeFieldEnd();
        }
        if (struct.ip != null) {
          oprot.writeFieldBegin(IP_FIELD_DESC);
          oprot.writeString(struct.ip);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PORT_FIELD_DESC);
        oprot.writeI32(struct.port);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(HOPS_FIELD_DESC);
        oprot.writeI32(struct.hops);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fileSearch_argsTupleSchemeFactory implements SchemeFactory {
      public fileSearch_argsTupleScheme getScheme() {
        return new fileSearch_argsTupleScheme();
      }
    }

    private static class fileSearch_argsTupleScheme extends TupleScheme<fileSearch_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fileSearch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFileName()) {
          optionals.set(0);
        }
        if (struct.isSetIp()) {
          optionals.set(1);
        }
        if (struct.isSetPort()) {
          optionals.set(2);
        }
        if (struct.isSetId()) {
          optionals.set(3);
        }
        if (struct.isSetHops()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetFileName()) {
          oprot.writeString(struct.fileName);
        }
        if (struct.isSetIp()) {
          oprot.writeString(struct.ip);
        }
        if (struct.isSetPort()) {
          oprot.writeI32(struct.port);
        }
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
        if (struct.isSetHops()) {
          oprot.writeI32(struct.hops);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fileSearch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.fileName = iprot.readString();
          struct.setFileNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ip = iprot.readString();
          struct.setIpIsSet(true);
        }
        if (incoming.get(2)) {
          struct.port = iprot.readI32();
          struct.setPortIsSet(true);
        }
        if (incoming.get(3)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
        if (incoming.get(4)) {
          struct.hops = iprot.readI32();
          struct.setHopsIsSet(true);
        }
      }
    }

  }

  public static class fileFound_args implements org.apache.thrift.TBase<fileFound_args, fileFound_args._Fields>, java.io.Serializable, Cloneable, Comparable<fileFound_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fileFound_args");

    private static final org.apache.thrift.protocol.TField FILE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("fileList", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField SEARCH_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("searchIp", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SEARCH_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("searchPort", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField FOUND_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("foundIp", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField FOUND_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("foundPort", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)6);
    private static final org.apache.thrift.protocol.TField HOPS_FIELD_DESC = new org.apache.thrift.protocol.TField("hops", org.apache.thrift.protocol.TType.I32, (short)7);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fileFound_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new fileFound_argsTupleSchemeFactory());
    }

    public List<String> fileList; // required
    public String searchIp; // required
    public int searchPort; // required
    public String foundIp; // required
    public int foundPort; // required
    public int id; // required
    public int hops; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILE_LIST((short)1, "fileList"),
      SEARCH_IP((short)2, "searchIp"),
      SEARCH_PORT((short)3, "searchPort"),
      FOUND_IP((short)4, "foundIp"),
      FOUND_PORT((short)5, "foundPort"),
      ID((short)6, "id"),
      HOPS((short)7, "hops");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILE_LIST
            return FILE_LIST;
          case 2: // SEARCH_IP
            return SEARCH_IP;
          case 3: // SEARCH_PORT
            return SEARCH_PORT;
          case 4: // FOUND_IP
            return FOUND_IP;
          case 5: // FOUND_PORT
            return FOUND_PORT;
          case 6: // ID
            return ID;
          case 7: // HOPS
            return HOPS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SEARCHPORT_ISSET_ID = 0;
    private static final int __FOUNDPORT_ISSET_ID = 1;
    private static final int __ID_ISSET_ID = 2;
    private static final int __HOPS_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILE_LIST, new org.apache.thrift.meta_data.FieldMetaData("fileList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.SEARCH_IP, new org.apache.thrift.meta_data.FieldMetaData("searchIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SEARCH_PORT, new org.apache.thrift.meta_data.FieldMetaData("searchPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.FOUND_IP, new org.apache.thrift.meta_data.FieldMetaData("foundIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FOUND_PORT, new org.apache.thrift.meta_data.FieldMetaData("foundPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.HOPS, new org.apache.thrift.meta_data.FieldMetaData("hops", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fileFound_args.class, metaDataMap);
    }

    public fileFound_args() {
    }

    public fileFound_args(
      List<String> fileList,
      String searchIp,
      int searchPort,
      String foundIp,
      int foundPort,
      int id,
      int hops)
    {
      this();
      this.fileList = fileList;
      this.searchIp = searchIp;
      this.searchPort = searchPort;
      setSearchPortIsSet(true);
      this.foundIp = foundIp;
      this.foundPort = foundPort;
      setFoundPortIsSet(true);
      this.id = id;
      setIdIsSet(true);
      this.hops = hops;
      setHopsIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fileFound_args(fileFound_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetFileList()) {
        List<String> __this__fileList = new ArrayList<String>(other.fileList);
        this.fileList = __this__fileList;
      }
      if (other.isSetSearchIp()) {
        this.searchIp = other.searchIp;
      }
      this.searchPort = other.searchPort;
      if (other.isSetFoundIp()) {
        this.foundIp = other.foundIp;
      }
      this.foundPort = other.foundPort;
      this.id = other.id;
      this.hops = other.hops;
    }

    public fileFound_args deepCopy() {
      return new fileFound_args(this);
    }

    @Override
    public void clear() {
      this.fileList = null;
      this.searchIp = null;
      setSearchPortIsSet(false);
      this.searchPort = 0;
      this.foundIp = null;
      setFoundPortIsSet(false);
      this.foundPort = 0;
      setIdIsSet(false);
      this.id = 0;
      setHopsIsSet(false);
      this.hops = 0;
    }

    public int getFileListSize() {
      return (this.fileList == null) ? 0 : this.fileList.size();
    }

    public java.util.Iterator<String> getFileListIterator() {
      return (this.fileList == null) ? null : this.fileList.iterator();
    }

    public void addToFileList(String elem) {
      if (this.fileList == null) {
        this.fileList = new ArrayList<String>();
      }
      this.fileList.add(elem);
    }

    public List<String> getFileList() {
      return this.fileList;
    }

    public fileFound_args setFileList(List<String> fileList) {
      this.fileList = fileList;
      return this;
    }

    public void unsetFileList() {
      this.fileList = null;
    }

    /** Returns true if field fileList is set (has been assigned a value) and false otherwise */
    public boolean isSetFileList() {
      return this.fileList != null;
    }

    public void setFileListIsSet(boolean value) {
      if (!value) {
        this.fileList = null;
      }
    }

    public String getSearchIp() {
      return this.searchIp;
    }

    public fileFound_args setSearchIp(String searchIp) {
      this.searchIp = searchIp;
      return this;
    }

    public void unsetSearchIp() {
      this.searchIp = null;
    }

    /** Returns true if field searchIp is set (has been assigned a value) and false otherwise */
    public boolean isSetSearchIp() {
      return this.searchIp != null;
    }

    public void setSearchIpIsSet(boolean value) {
      if (!value) {
        this.searchIp = null;
      }
    }

    public int getSearchPort() {
      return this.searchPort;
    }

    public fileFound_args setSearchPort(int searchPort) {
      this.searchPort = searchPort;
      setSearchPortIsSet(true);
      return this;
    }

    public void unsetSearchPort() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEARCHPORT_ISSET_ID);
    }

    /** Returns true if field searchPort is set (has been assigned a value) and false otherwise */
    public boolean isSetSearchPort() {
      return EncodingUtils.testBit(__isset_bitfield, __SEARCHPORT_ISSET_ID);
    }

    public void setSearchPortIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEARCHPORT_ISSET_ID, value);
    }

    public String getFoundIp() {
      return this.foundIp;
    }

    public fileFound_args setFoundIp(String foundIp) {
      this.foundIp = foundIp;
      return this;
    }

    public void unsetFoundIp() {
      this.foundIp = null;
    }

    /** Returns true if field foundIp is set (has been assigned a value) and false otherwise */
    public boolean isSetFoundIp() {
      return this.foundIp != null;
    }

    public void setFoundIpIsSet(boolean value) {
      if (!value) {
        this.foundIp = null;
      }
    }

    public int getFoundPort() {
      return this.foundPort;
    }

    public fileFound_args setFoundPort(int foundPort) {
      this.foundPort = foundPort;
      setFoundPortIsSet(true);
      return this;
    }

    public void unsetFoundPort() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FOUNDPORT_ISSET_ID);
    }

    /** Returns true if field foundPort is set (has been assigned a value) and false otherwise */
    public boolean isSetFoundPort() {
      return EncodingUtils.testBit(__isset_bitfield, __FOUNDPORT_ISSET_ID);
    }

    public void setFoundPortIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FOUNDPORT_ISSET_ID, value);
    }

    public int getId() {
      return this.id;
    }

    public fileFound_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public int getHops() {
      return this.hops;
    }

    public fileFound_args setHops(int hops) {
      this.hops = hops;
      setHopsIsSet(true);
      return this;
    }

    public void unsetHops() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HOPS_ISSET_ID);
    }

    /** Returns true if field hops is set (has been assigned a value) and false otherwise */
    public boolean isSetHops() {
      return EncodingUtils.testBit(__isset_bitfield, __HOPS_ISSET_ID);
    }

    public void setHopsIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HOPS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FILE_LIST:
        if (value == null) {
          unsetFileList();
        } else {
          setFileList((List<String>)value);
        }
        break;

      case SEARCH_IP:
        if (value == null) {
          unsetSearchIp();
        } else {
          setSearchIp((String)value);
        }
        break;

      case SEARCH_PORT:
        if (value == null) {
          unsetSearchPort();
        } else {
          setSearchPort((Integer)value);
        }
        break;

      case FOUND_IP:
        if (value == null) {
          unsetFoundIp();
        } else {
          setFoundIp((String)value);
        }
        break;

      case FOUND_PORT:
        if (value == null) {
          unsetFoundPort();
        } else {
          setFoundPort((Integer)value);
        }
        break;

      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Integer)value);
        }
        break;

      case HOPS:
        if (value == null) {
          unsetHops();
        } else {
          setHops((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FILE_LIST:
        return getFileList();

      case SEARCH_IP:
        return getSearchIp();

      case SEARCH_PORT:
        return Integer.valueOf(getSearchPort());

      case FOUND_IP:
        return getFoundIp();

      case FOUND_PORT:
        return Integer.valueOf(getFoundPort());

      case ID:
        return Integer.valueOf(getId());

      case HOPS:
        return Integer.valueOf(getHops());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FILE_LIST:
        return isSetFileList();
      case SEARCH_IP:
        return isSetSearchIp();
      case SEARCH_PORT:
        return isSetSearchPort();
      case FOUND_IP:
        return isSetFoundIp();
      case FOUND_PORT:
        return isSetFoundPort();
      case ID:
        return isSetId();
      case HOPS:
        return isSetHops();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fileFound_args)
        return this.equals((fileFound_args)that);
      return false;
    }

    public boolean equals(fileFound_args that) {
      if (that == null)
        return false;

      boolean this_present_fileList = true && this.isSetFileList();
      boolean that_present_fileList = true && that.isSetFileList();
      if (this_present_fileList || that_present_fileList) {
        if (!(this_present_fileList && that_present_fileList))
          return false;
        if (!this.fileList.equals(that.fileList))
          return false;
      }

      boolean this_present_searchIp = true && this.isSetSearchIp();
      boolean that_present_searchIp = true && that.isSetSearchIp();
      if (this_present_searchIp || that_present_searchIp) {
        if (!(this_present_searchIp && that_present_searchIp))
          return false;
        if (!this.searchIp.equals(that.searchIp))
          return false;
      }

      boolean this_present_searchPort = true;
      boolean that_present_searchPort = true;
      if (this_present_searchPort || that_present_searchPort) {
        if (!(this_present_searchPort && that_present_searchPort))
          return false;
        if (this.searchPort != that.searchPort)
          return false;
      }

      boolean this_present_foundIp = true && this.isSetFoundIp();
      boolean that_present_foundIp = true && that.isSetFoundIp();
      if (this_present_foundIp || that_present_foundIp) {
        if (!(this_present_foundIp && that_present_foundIp))
          return false;
        if (!this.foundIp.equals(that.foundIp))
          return false;
      }

      boolean this_present_foundPort = true;
      boolean that_present_foundPort = true;
      if (this_present_foundPort || that_present_foundPort) {
        if (!(this_present_foundPort && that_present_foundPort))
          return false;
        if (this.foundPort != that.foundPort)
          return false;
      }

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_hops = true;
      boolean that_present_hops = true;
      if (this_present_hops || that_present_hops) {
        if (!(this_present_hops && that_present_hops))
          return false;
        if (this.hops != that.hops)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_fileList = true && (isSetFileList());
      list.add(present_fileList);
      if (present_fileList)
        list.add(fileList);

      boolean present_searchIp = true && (isSetSearchIp());
      list.add(present_searchIp);
      if (present_searchIp)
        list.add(searchIp);

      boolean present_searchPort = true;
      list.add(present_searchPort);
      if (present_searchPort)
        list.add(searchPort);

      boolean present_foundIp = true && (isSetFoundIp());
      list.add(present_foundIp);
      if (present_foundIp)
        list.add(foundIp);

      boolean present_foundPort = true;
      list.add(present_foundPort);
      if (present_foundPort)
        list.add(foundPort);

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      boolean present_hops = true;
      list.add(present_hops);
      if (present_hops)
        list.add(hops);

      return list.hashCode();
    }

    @Override
    public int compareTo(fileFound_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFileList()).compareTo(other.isSetFileList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileList, other.fileList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSearchIp()).compareTo(other.isSetSearchIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSearchIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchIp, other.searchIp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSearchPort()).compareTo(other.isSetSearchPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSearchPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchPort, other.searchPort);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFoundIp()).compareTo(other.isSetFoundIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFoundIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foundIp, other.foundIp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFoundPort()).compareTo(other.isSetFoundPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFoundPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foundPort, other.foundPort);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHops()).compareTo(other.isSetHops());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHops()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hops, other.hops);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fileFound_args(");
      boolean first = true;

      sb.append("fileList:");
      if (this.fileList == null) {
        sb.append("null");
      } else {
        sb.append(this.fileList);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("searchIp:");
      if (this.searchIp == null) {
        sb.append("null");
      } else {
        sb.append(this.searchIp);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("searchPort:");
      sb.append(this.searchPort);
      first = false;
      if (!first) sb.append(", ");
      sb.append("foundIp:");
      if (this.foundIp == null) {
        sb.append("null");
      } else {
        sb.append(this.foundIp);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("foundPort:");
      sb.append(this.foundPort);
      first = false;
      if (!first) sb.append(", ");
      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("hops:");
      sb.append(this.hops);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fileFound_argsStandardSchemeFactory implements SchemeFactory {
      public fileFound_argsStandardScheme getScheme() {
        return new fileFound_argsStandardScheme();
      }
    }

    private static class fileFound_argsStandardScheme extends StandardScheme<fileFound_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fileFound_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILE_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.fileList = new ArrayList<String>(_list0.size);
                  String _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = iprot.readString();
                    struct.fileList.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setFileListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SEARCH_IP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.searchIp = iprot.readString();
                struct.setSearchIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SEARCH_PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.searchPort = iprot.readI32();
                struct.setSearchPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // FOUND_IP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.foundIp = iprot.readString();
                struct.setFoundIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // FOUND_PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.foundPort = iprot.readI32();
                struct.setFoundPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // HOPS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.hops = iprot.readI32();
                struct.setHopsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fileFound_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fileList != null) {
          oprot.writeFieldBegin(FILE_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.fileList.size()));
            for (String _iter3 : struct.fileList)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.searchIp != null) {
          oprot.writeFieldBegin(SEARCH_IP_FIELD_DESC);
          oprot.writeString(struct.searchIp);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SEARCH_PORT_FIELD_DESC);
        oprot.writeI32(struct.searchPort);
        oprot.writeFieldEnd();
        if (struct.foundIp != null) {
          oprot.writeFieldBegin(FOUND_IP_FIELD_DESC);
          oprot.writeString(struct.foundIp);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(FOUND_PORT_FIELD_DESC);
        oprot.writeI32(struct.foundPort);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(HOPS_FIELD_DESC);
        oprot.writeI32(struct.hops);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fileFound_argsTupleSchemeFactory implements SchemeFactory {
      public fileFound_argsTupleScheme getScheme() {
        return new fileFound_argsTupleScheme();
      }
    }

    private static class fileFound_argsTupleScheme extends TupleScheme<fileFound_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fileFound_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFileList()) {
          optionals.set(0);
        }
        if (struct.isSetSearchIp()) {
          optionals.set(1);
        }
        if (struct.isSetSearchPort()) {
          optionals.set(2);
        }
        if (struct.isSetFoundIp()) {
          optionals.set(3);
        }
        if (struct.isSetFoundPort()) {
          optionals.set(4);
        }
        if (struct.isSetId()) {
          optionals.set(5);
        }
        if (struct.isSetHops()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetFileList()) {
          {
            oprot.writeI32(struct.fileList.size());
            for (String _iter4 : struct.fileList)
            {
              oprot.writeString(_iter4);
            }
          }
        }
        if (struct.isSetSearchIp()) {
          oprot.writeString(struct.searchIp);
        }
        if (struct.isSetSearchPort()) {
          oprot.writeI32(struct.searchPort);
        }
        if (struct.isSetFoundIp()) {
          oprot.writeString(struct.foundIp);
        }
        if (struct.isSetFoundPort()) {
          oprot.writeI32(struct.foundPort);
        }
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
        if (struct.isSetHops()) {
          oprot.writeI32(struct.hops);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fileFound_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.fileList = new ArrayList<String>(_list5.size);
            String _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = iprot.readString();
              struct.fileList.add(_elem6);
            }
          }
          struct.setFileListIsSet(true);
        }
        if (incoming.get(1)) {
          struct.searchIp = iprot.readString();
          struct.setSearchIpIsSet(true);
        }
        if (incoming.get(2)) {
          struct.searchPort = iprot.readI32();
          struct.setSearchPortIsSet(true);
        }
        if (incoming.get(3)) {
          struct.foundIp = iprot.readString();
          struct.setFoundIpIsSet(true);
        }
        if (incoming.get(4)) {
          struct.foundPort = iprot.readI32();
          struct.setFoundPortIsSet(true);
        }
        if (incoming.get(5)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
        if (incoming.get(6)) {
          struct.hops = iprot.readI32();
          struct.setHopsIsSet(true);
        }
      }
    }

  }

}